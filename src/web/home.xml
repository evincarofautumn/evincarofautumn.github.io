<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE page
 SYSTEM "page.dtd">
<page id="home">
 <head>
  <title>Jon Purdy</title>
 </head>
 <body>

  <sect>
   <head>
    <title>About</title>
   </head>
   <body>

    <para>
     A rare being from the forests of New England,
     transplanted to California.
    </para>

    <para>
     Most of my work is in programming language technology,
     including
     type systems,
     modern compiler design,
     parsing,
     code generation,
     usability design,
     and garbage collector implementation.
     I am familiar with an unusually broad array
     of programming technologies,
     but I have the most familiarity and professional experience
     with Haskell, C, C++, and Perl.
    </para>

    <para>
     I am available for hire to write code
     or to manage, teach, and mentor those who do,
     preferably using Haskell, Rust, or similar.
     The code I write is unusually reliable,
     but I do not produce it quickly.
     See &_;<link to="cv">my CV</link>&_; for more.
    </para>

   </body>
  </sect>

  <sect>
   <head>
    <title>Writing</title>
   </head>
   <body>
    <map>
     <assn>
      <key><link to="code">Code</link></key>
      <val>
       <para>Things about computing and programming.</para>
      </val>
     </assn>
     <assn>
      <key><link to="loops">Loops</link></key>
      <val>
       <para>Gathered writings on crochet and other yarncraft.</para>
      </val>
     </assn>
     <assn>
      <key><link to="credits">Credits</link></key>
      <val>
       <para>
        Credits and citations for content on this site.
       </para>
      </val>
     </assn>
    </map>
   </body>
  </sect>

  <sect>
   <head>
    <title>Talks</title>
   </head>
   <body>

    <sect>
     <head>
      <title>
       Concatenative Programming: From Ivory to Metal (2017)
      </title>
      <subtitle>
       Stanford EE380 Computer Systems Colloquium Seminar
      </subtitle>
     </head>
     <body>
      <para>
       “Concatenative programming is
       a relatively new programming paradigm
       built on a simple yet powerful tool:
       function composition.
       In this talk I will give
       an overview of concatenative languages
       from high-level theory
       down to low-level implementation.
       I will discuss some historical background,
       give an overview
       of the existing concatenative programming literature,
       then dive into examples
       of the exciting advantages
       that these languages may have to offer
       in terms of program correctness, safety, usability,
       and performance on the hardware of today and tomorrow.”
      </para>
      <youtube>_IgqJr8jG8M</youtube>
     </body>
    </sect>

   </body>
  </sect>

 </body>
</page>
